//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.4 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2012.05.07 at 02:49:13 PM IST 
//


package in.gov.uidai.impl.dataportal.enrl_search_request;

import javax.xml.bind.annotation.XmlEnum;
import javax.xml.bind.annotation.XmlEnumValue;
import javax.xml.bind.annotation.XmlType;


/**
 * <p>Java class for ProcessingInfoField.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * <p>
 * <pre>
 * &lt;simpleType name="ProcessingInfoField">
 *   &lt;restriction base="{http://www.w3.org/2001/XMLSchema}string">
 *     &lt;enumeration value="uidIssuedOrRejectedDate"/>
 *     &lt;enumeration value="stageStatus"/>
 *     &lt;enumeration value="packetState"/>
 *     &lt;enumeration value="reasonCode"/>
 *     &lt;enumeration value="rejectReasonCode"/>
 *     &lt;enumeration value="REJECTED"/>
 *     &lt;enumeration value="COMPLETED"/>
 *   &lt;/restriction>
 * &lt;/simpleType>
 * </pre>
 * 
 */
@XmlType(name = "ProcessingInfoField")
@XmlEnum
public enum ProcessingInfoField {

    @XmlEnumValue("uidIssuedOrRejectedDate")
    UID_ISSUED_OR_REJECTED_DATE("uidIssuedOrRejectedDate"),
    @XmlEnumValue("stageStatus")
    STAGE_STATUS("stageStatus"),
    @XmlEnumValue("packetState")
    PACKET_STATE("packetState"),
    @XmlEnumValue("reasonCode")
    REASON_CODE("reasonCode"),
    @XmlEnumValue("rejectReasonCode")
    REJECT_REASON_CODE("rejectReasonCode"),
    REJECTED("REJECTED"),
    COMPLETED("COMPLETED");
    private final String value;

    ProcessingInfoField(String v) {
        value = v;
    }

    public String value() {
        return value;
    }

    public static ProcessingInfoField fromValue(String v) {
        for (ProcessingInfoField c: ProcessingInfoField.values()) {
            if (c.value.equals(v)) {
                return c;
            }
        }
        throw new IllegalArgumentException(v);
    }

}
